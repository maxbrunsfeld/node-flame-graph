#!/usr/bin/env node

const path = require('path')
const args = require('minimist')(process.argv.slice(2))
const {
  generateFlameGraphForCommand,
  generateFlameGraphForProcess
} = require('../src/generate-flame-graph')

const pid = args.pid || args.p
const command = args.command || args.c
let functionNames = args.function || args.functions || args.f

if (functionNames) functionNames = functionNames.split(/\s+/).map(name => name.trim())

async function main () {
  if (command) {
    console.log(await generateFlameGraphForCommand(command, {functionNames, fullPage: true}))
  } else if (pid) {
    const {html, stop} = generateFlameGraphForProcess(pid, {functionNames, fullPage: true})
    process.on('SIGINT', () => stop())
    console.log(await html)
    process.exit(0)
  } else {
    console.log(
      `Usage:

  ${path.basename(process.argv[1])} [-c command] [-p pid] [-f functions]

Options:

  -p --pid        Pid of the process to profile. Profiling will continue until
                  that process exits or this program is killed with SIGINT.

  -c --command    Command to execute with the current shell. Profiling will
                  continue until the command exits.

  -f --functions  Optional whitespace-separated list of function names to profile.
                  The resulting flame graph will only include stacks that include
                  these function names.`
    )
  }
}

main()
